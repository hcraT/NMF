% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/NMFSet-class.R, R/NMFplots.R
\docType{class}
\name{NMFfitX-class}
\alias{NMFfitX-class}
\alias{runtime.all,NMFfitX-method}
\alias{nrun,NMFfitX-method}
\alias{consensus,NMFfitX-method}
\alias{consensushc,NMFfitX-method}
\alias{predict,NMFfitX-method}
\alias{fit,NMFfitX-method}
\alias{minfit,NMFfitX-method}
\alias{show,NMFfitX-method}
\alias{getRNG1,NMFfitX-method}
\alias{residuals,NMFfitX-method}
\alias{deviance,NMFfitX-method}
\alias{ibterms,NMFfitX-method}
\alias{dispersion,NMFfitX-method}
\alias{NMFfitX,NMFfitX-method}
\alias{summary,NMFfitX-method}
\alias{metaHeatmap,NMFfitX-method}
\alias{consensusmap,NMFfitX-method}
\alias{basismap,NMFfitX-method}
\alias{coefmap,NMFfitX-method}
\alias{cophcor,NMFfitX-method}
\alias{silhouette.NMFfitX}
\title{Virtual Class to Handle Results from Multiple Runs of NMF Algorithms}
\usage{
\S4method{runtime.all}{NMFfitX}(object)

\S4method{nrun}{NMFfitX}(object)

\S4method{consensus}{NMFfitX}(object, ...)

\S4method{consensushc}{NMFfitX}(object, what = c("consensus", "fit"), ...)

\S4method{predict}{NMFfitX}(
  object,
  what = c("columns", "rows", "samples", "features", "consensus", "chc"),
  dmatrix = FALSE,
  ...
)

\S4method{fit}{NMFfitX}(object)

\S4method{minfit}{NMFfitX}(object)

\S4method{show}{NMFfitX}(object)

\S4method{getRNG1}{NMFfitX}(object)

\S4method{residuals}{NMFfitX}(object, ...)

\S4method{deviance}{NMFfitX}(object, ...)

\S4method{ibterms}{NMFfitX}(object)

\S4method{dispersion}{NMFfitX}(object, ...)

\S4method{NMFfitX}{NMFfitX}(object, ...)

\S4method{summary}{NMFfitX}(object, ..., with.silhouette = "both")

\S4method{metaHeatmap}{NMFfitX}(object, ...)

\S4method{consensusmap}{NMFfitX}(
  object,
  annRow = NA,
  annCol = NA,
  tracks = c("basis:", "consensus:", "silhouette:"),
  main = "Consensus matrix",
  info = FALSE,
  ...
)

\S4method{basismap}{NMFfitX}(object, ...)

\S4method{coefmap}{NMFfitX}(
  object,
  Colv = TRUE,
  annRow = NA,
  annCol = NA,
  tracks = c("basis", "consensus:"),
  ...
)

\S4method{cophcor}{NMFfitX}(object, ...)

\method{silhouette}{NMFfitX}(x, ...)
}
\arguments{
\item{object}{an object of class \code{NMFfitX}}

\item{...}{other arguments passed to suitable methods, like \link{predict,NMF-method}.}

\item{what}{character string that indicates which matrix to use in the
computation.}

\item{with.silhouette}{indicates which silhouette average width should
be computed. Its value is partially matched against: \code{'both', 'features',
'samples'} or \code{'none'}.}
}
\description{
This class defines a common interface to handle the results from multiple
runs of a single NMF algorithm, performed with the \code{\link{nmf}} method.
}
\details{
Currently, this interface is implemented by two classes,
\code{\linkS4class{NMFfitX1}} and \code{\linkS4class{NMFfitXn}}, which
respectively handle the case where only the best fit is kept, and the case
where the list of all the fits is returned.

See \code{\link{nmf}} for more details on the method arguments.
}
\section{Slots}{

\describe{
\item{\code{runtime.all}}{Object of class \code{\link[=proc.time]{proc_time}} that
contains CPU times required to perform all the runs.}
}}

\examples{

# generate a synthetic dataset with known classes
n <- 20; counts <- c(5, 2, 3);
V <- syntheticNMF(n, counts)

# perform multiple runs of one algorithm (default is to keep only best fit)
res <- nmf(V, 3, nrun=3)
res

# plot a heatmap of the consensus matrix
\dontrun{ consensusmap(res) }

# perform multiple runs of one algorithm (keep all the fits)
res <- nmf(V, 3, nrun=3, .options='k')
res
 
# For multiple NMF runs, the RNG settings used for the first run is also stored
V <- rmatrix(20,10)
res <- nmf(V, 3, nrun=4)
# RNG used for the best fit
getRNG(res)
# RNG used for the first of all fits
getRNG1(res)
# they may differ if the best fit is not the first one
rng.equal(res, getRNG1(res))

}
\seealso{
Other multipleNMF: 
\code{\link{NMFfitX1-class}},
\code{\link{NMFfitXn-class}}
}
\concept{multipleNMF}
\section{Methods (by generic)}{
\bold{basismap:}

\itemize{
\item \code{basismap(object = NMFfitX)}: Plots a heatmap of the basis matrix of the best fit in \code{object}.
}


\bold{coefmap:}

\itemize{
\item \code{coefmap(object = NMFfitX)}: Plots a heatmap of the coefficient matrix of the best fit in \code{object}.

This method adds:
\itemize{
\item an extra special column annotation track for multi-run NMF fits,
\code{'consensus:'}, that shows the consensus cluster associated to each sample.
\item a column sorting schema \code{'consensus'} that can be passed
to argument \code{Colv} and orders the columns using the hierarchical clustering of the
consensus matrix with average linkage, as returned by \code{\link{consensushc}(object)}.
This is also the ordering that is used by default for the heatmap of the consensus matrix
as ploted by \code{\link{consensusmap}}.
}
}


\bold{consensus:}

\itemize{
\item \code{consensus(object = NMFfitX)}: Pure virtual method defined to ensure \code{consensus} is defined for sub-classes of \code{NMFfitX}.
It throws an error if called.
}


\bold{consensushc:}

\itemize{
\item \code{consensushc(object = NMFfitX)}: Compute the hierarchical clustering on the consensus matrix of \code{object},
or on the connectivity matrix of the best fit in \code{object}.
}


\bold{consensusmap:}

\itemize{
\item \code{consensusmap(object = NMFfitX)}: Plots a heatmap of the consensus matrix obtained when fitting an NMF model with multiple runs.
}


\bold{cophcor:}

\itemize{
\item \code{cophcor(object = NMFfitX)}: Computes the cophenetic correlation coefficient on the consensus matrix
of \code{object}.
All arguments in \code{...} are passed to the method \code{cophcor,matrix}.
}


\bold{deviance:}

\itemize{
\item \code{deviance(object = NMFfitX)}: Returns the deviance achieved by the best fit object, i.e. the lowest
deviance achieved across all NMF runs.
}


\bold{dispersion:}

\itemize{
\item \code{dispersion(object = NMFfitX)}: Computes the \link{dispersion} on the consensus matrix obtained from multiple NMF
runs.
}


\bold{fit:}

\itemize{
\item \code{fit(object = NMFfitX)}: Returns the model object that achieves the lowest residual approximation
error across all the runs.

It is a pure virtual method defined to ensure \code{fit} is defined
for sub-classes of \code{NMFfitX}, which throws an error if called.
}


\bold{getRNG1:}

\itemize{
\item \code{getRNG1(object = NMFfitX)}: Returns the RNG settings used for the first NMF run of multiple NMF runs.
}


\bold{ibterms:}

\itemize{
\item \code{ibterms(object = NMFfitX)}: Method for multiple NMF fit objects, which returns the indexes of fixed basis
terms from the best fitted model.
}


\bold{metaHeatmap:}

\itemize{
\item \code{metaHeatmap(object = NMFfitX)}: Deprecated method subsituted by \code{\link{consensusmap}}.
}


\bold{minfit:}

\itemize{
\item \code{minfit(object = NMFfitX)}: Returns the fit object that achieves the lowest residual approximation
error across all the runs.

It is a pure virtual method defined to ensure \code{minfit} is defined
for sub-classes of \code{NMFfitX}, which throws an error if called.
}


\bold{nmf.equal:}

\itemize{
\item \code{nmf.equal(x = NMFfitX,y = NMF)}: Compares two NMF models when at least one comes from multiple NMF runs.

\item \code{nmf.equal(x = NMF,y = NMFfitX)}: Compares two NMF models when at least one comes from multiple NMF runs.
}


\bold{NMFfitX:}

\itemize{
\item \code{NMFfitX(object = NMFfitX)}: Provides a way to aggregate \code{NMFfitXn} objects into an \code{NMFfitX1}
object.
}


\bold{nrun:}

\itemize{
\item \code{nrun(object = NMFfitX)}: Returns the number of NMF runs performed to create \code{object}.

It is a pure virtual method defined to ensure \code{nrun} is defined
for sub-classes of \code{NMFfitX}, which throws an error if called.

Note that because the \code{\link{nmf}} function allows to run the NMF
computation keeping only the best fit, \code{nrun} may return a value
greater than one, while only the result of the best run is stored in
the object (cf. option \code{'k'} in method \code{\link{nmf}}).
}


\bold{predict:}

\itemize{
\item \code{predict(object = NMFfitX)}: Returns the cluster membership index from an NMF model fitted with multiple
runs.

Besides the type of clustering available for any NMF models
(\code{'columns', 'rows', 'samples', 'features'}), this method can return
the cluster membership index based on the consensus matrix, computed from
the multiple NMF runs.

Argument \code{what} accepts the following extra types:
\describe{
\item{\code{'chc'}}{ returns the cluster membership based on the
hierarchical clustering of the consensus matrix, as performed by
\code{\link{consensushc}}.}
\item{\code{'consensus'}}{ same as \code{'chc'} but the levels of the membership
index are re-labeled to match the order of the clusters as they would be displayed on the
associated dendrogram, as re-ordered on the default annotation track in consensus
heatmap produced by \code{\link{consensusmap}}.}
}

When \code{what} takes values other that those described above, then all extra arguments are passed to
the \link{predict,NMF-method}.
}


\bold{residuals:}

\itemize{
\item \code{residuals(object = NMFfitX)}: Returns the residuals achieved by the best fit object, i.e. the lowest
residual approximation error achieved across all NMF runs.
}


\bold{runtime.all:}

\itemize{
\item \code{runtime.all(object = NMFfitX)}: Returns the CPU time required to compute all the NMF runs.
It returns \code{NULL} if no CPU data is available.
}


\bold{show:}

\itemize{
\item \code{show(object = NMFfitX)}: Show method for objects of class \code{NMFfitX}
}


\bold{summary:}

\itemize{
\item \code{summary(object = NMFfitX)}: Computes a set of measures to help evaluate the quality of the \emph{best
fit} of the set.
The result is similar to the result from the \code{summary} method of
\code{NMFfit} objects.
See \code{\linkS4class{NMF}} for details on the computed measures.
In addition, the cophenetic correlation (\code{\link{cophcor}}) and
\code{\link{dispersion}} coefficients of the consensus matrix are returned,
as well as the total CPU time (\code{\link{runtime.all}}).
}

}

