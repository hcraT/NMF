% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/NMFStrategyOctave-class.R
\docType{class}
\name{NMFStrategyOctave-class}
\alias{NMFStrategyOctave-class}
\alias{algorithm,NMFStrategyOctave-method}
\alias{algorithm<-,NMFStrategyOctave,character-method}
\alias{show,NMFStrategyOctave-method}
\title{S4 Interface for Octave-Matlab NMF Algorithms}
\usage{
\S4method{algorithm}{NMFStrategyOctave}(object, load = FALSE)

\S4method{algorithm}{NMFStrategyOctave,character}(object) <- value

\S4method{show}{NMFStrategyOctave}(object)
}
\arguments{
\item{load}{logical that indicates if the algorithm should be loaded as an
R function.}

\item{value}{a single character string that speficies the name of a defined Octave function
that implements the \code{NMF} algorithm.}
}
\description{
This class implements the virtual interface \code{\linkS4class{NMFStrategy}}
for NMF algorithms that are implemented in Octave/Matlab, and provided as
a set of .m files or as plain code.
}
\details{
The \code{run} method for this class runs the algorithms via the
\code{RcppOctave} package.
}
\section{Slots}{

\describe{
\item{\code{algorithm}}{character string that gives the name of the main Octave/Matlab
function that implements the algorithm.
The function must take at least two arguments: the target matrix and the initial
NMF model, converted into an Octave list object, whose named element correspond to
the slots of the R object's S4 class.}

\item{\code{mcode}}{character vector that contains a set of path to .m files.
These files are (re-)sourced every time the strategy is called, and must be
present at runtime in the current directory or in a directory from Octave path.}
}}

\section{Methods (by generic)}{
\itemize{
\item \code{run(object = NMFStrategyOctave,y = matrix,x = NMFfit)}: Runs the NMF algorithms implemented by the Octave/Matlab function associated with the
strategy -- and stored in slot \code{'algorithm'} of \code{object}.

This method is usually not called directly, but only via the function \code{\link{nmf}}, which
takes care of many other details such as seeding the computation, handling RNG settings,
or setting up parallel computations.

\item \code{algorithm(object = NMFStrategyOctave)}: Returns the name of the Octave/Matlab function that implements the NMF algorithm -- as stored in
slot \code{algorithm}.

\item \code{algorithm<-(object = NMFStrategyOctave,value = character)}: Sets the name of the Octave/Matlab function that implements the NMF algorithm.
It is stored in slot \code{algorithm}.
}}

